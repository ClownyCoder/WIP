local config = {
    ["HeaderWidth"] = 250,
    ["AccentColor"] = Color3.fromRGB(0.0,0,0),
    ["PrimaryColor"] = Color3.fromRGB(20,20,20),
    ["SecondaryColor"] = Color3.fromRGB(25,25,25),
    ["AccentColor"] = Color3.fromRGB(50,50,50),
    ["TextColor"] =  Color3.new(1,1,1)
}

local gui = loadstring(game:HttpGet("https://raw.githubusercontent.com/ClownyCoder/Somesource/refs/heads/main/Somesource"))():Init(config,game.CoreGui)

gui:CreateCategory("Exit"):CreateButton("Click to exit the library",function() gui:CleanUp() end)

local lpg = gui:CreateCategory("Local Player")

lpg:CreateSlider("Walk Speed", function(ws) game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = ws end,0,1000,nil,true,game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)
lpg:CreateSlider("Jump Power", function(jp) game.Players.LocalPlayer.Character.Humanoid.JumpPower = jp end,0,1000,nil,true,game.Players.LocalPlayer.Character.Humanoid.JumpPower)
lpg:CreateButton("Force Field", function() Instance.new("ForceField",game.Players.LocalPlayer.Character) end)

Com = gui:CreateCategory("Combat")

local aimbotState = {
    circle = nil,
    radius = 120,
    dynamicColor = false,
    showFov = false,
    enabled = false,
    autoLock = false,
    teamCheck = false,
    locking = false,
    currentTarget = nil,
    lockConfirmed = false,
    settingsInitialized = false,
    settingsObjects = {}
}

local silentAimState = {
    enabled = false,
    hitChance = 100,
    targetPart = "Head",
    visibleCheck = false,
    settingsInitialized = false,
    settingsObjects = {}
}

local holdingKey = false
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Shared FOV Circle initialization
local function initFOVCircle()
    if not aimbotState.circle then
        aimbotState.circle = Drawing.new("Circle")
        aimbotState.circle.Thickness = 1.5
        aimbotState.circle.Transparency = 1
        aimbotState.circle.Filled = false
        aimbotState.circle.Color = Color3.new(1, 1, 1)
        aimbotState.circle.Radius = aimbotState.radius
        aimbotState.circle.Visible = false

        RunService.RenderStepped:Connect(function()
            aimbotState.circle.Position = UserInputService:GetMouseLocation()
            aimbotState.circle.Radius = aimbotState.radius
            aimbotState.circle.Visible = (aimbotState.enabled or silentAimState.enabled) and aimbotState.showFov
            
            if aimbotState.dynamicColor then
                local mousePos = UserInputService:GetMouseLocation()
                local closest = nil
                local shortest = math.huge

                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                        if aimbotState.teamCheck and player.Team == LocalPlayer.Team then continue end
                        local head = player.Character.Head
                        local pos, onScreen = Camera:WorldToViewportPoint(head.Position)
                        if onScreen then
                            local dist = (Vector2.new(pos.X, pos.Y) - mousePos).Magnitude
                            if dist < shortest and dist < aimbotState.radius then
                                shortest = dist
                                closest = head
                            end
                        end
                    end
                end
                aimbotState.circle.Color = closest and Color3.new(1, 0, 0) or Color3.new(1, 1, 1)
            end
        end)
    end
end

-- Aimbot Switch
Com:CreateSwitch("Aimbot", function(enabled)
    aimbotState.enabled = enabled
    initFOVCircle()

    -- Auto-lock toggle with Q key
    UserInputService.InputBegan:Connect(function(input, gpe)
        if input.KeyCode == Enum.KeyCode.Q and not gpe then
            aimbotState.autoLock = not aimbotState.autoLock
            if not aimbotState.autoLock then
                aimbotState.lockConfirmed = false
                aimbotState.currentTarget = nil
                aimbotState.locking = false
            end
            pcall(function()
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto-Lock",
                    Text = "Auto-Lock is now " .. (aimbotState.autoLock and "ON" or "OFF"),
                    Duration = 2
                })
            end)
            print("[Aimbot] Auto-Lock toggled to", aimbotState.autoLock)
        end
    end)

    -- Aimbot tracking
    if not aimbotState.trackingConnected then
        aimbotState.trackingConnected = true
        RunService.RenderStepped:Connect(function()
            if not aimbotState.enabled then return end

            local mousePos = UserInputService:GetMouseLocation()
            local closest = nil
            local shortest = math.huge

            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                    if aimbotState.teamCheck and player.Team == LocalPlayer.Team then continue end
                    local head = player.Character.Head
                    local pos, onScreen = Camera:WorldToViewportPoint(head.Position)
                    if onScreen then
                        local dist = (Vector2.new(pos.X, pos.Y) - mousePos).Magnitude
                        if dist < shortest and dist < aimbotState.radius then
                            shortest = dist
                            closest = head
                        end
                    end
                end
            end

            if aimbotState.autoLock then
                if closest and not aimbotState.locking and not aimbotState.lockConfirmed then
                    aimbotState.locking = true
                    aimbotState.currentTarget = closest

                    coroutine.wrap(function()
                        local duration = 0.2
                        local step = 0.05
                        for i = 0, 1, step / duration do
                            if not aimbotState.autoLock then break end
                            local goal = CFrame.new(Camera.CFrame.Position, aimbotState.currentTarget.Position)
                            Camera.CFrame = Camera.CFrame:Lerp(goal, i)
                            task.wait(step)
                        end
                        aimbotState.locking = false
                        aimbotState.lockConfirmed = true
                    end)()
                end

                if aimbotState.lockConfirmed and aimbotState.currentTarget and aimbotState.currentTarget.Parent then
                    Camera.CFrame = CFrame.new(Camera.CFrame.Position, aimbotState.currentTarget.Position)
                end

                if not closest then
                    aimbotState.currentTarget = nil
                    aimbotState.lockConfirmed = false
                    aimbotState.locking = false
                end
            elseif holdingKey and closest then
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, closest.Position)
            end
        end)
    end

    -- GUI Settings
    if not aimbotState.settingsInitialized then
        aimbotState.settingsInitialized = true

        -- Shared FOV settings
        table.insert(aimbotState.settingsObjects, Com:CreateSlider("FOV Radius", function(val)
            aimbotState.radius = val
        end, 50, 1000, nil, true, aimbotState.radius))

        table.insert(aimbotState.settingsObjects, Com:CreateSwitch("Dynamic Color", function(toggle)
            aimbotState.dynamicColor = toggle
        end))

        table.insert(aimbotState.settingsObjects, Com:CreateSwitch("Show FOV Circle", function(toggle)
            aimbotState.showFov = toggle
        end))

        -- Aimbot-specific settings
        table.insert(aimbotState.settingsObjects, Com:CreateSwitch("Auto-Lock", function(toggle)
            aimbotState.autoLock = toggle
        end))

        table.insert(aimbotState.settingsObjects, Com:CreateSwitch("Team Check", function(toggle)
            aimbotState.teamCheck = toggle
        end))
    end

    -- Show/hide setting UIs
    for _, setting in pairs(aimbotState.settingsObjects) do
        if setting and setting.Frame then
            setting.Frame.Visible = enabled
        end
    end

    print("🎯 Aimbot is now " .. (enabled and "Enabled" or "Disabled"))
end)

-- Silent Aim Switch
Com:CreateSwitch("Silent Aim", function(enabled)
    silentAimState.enabled = enabled
    initFOVCircle()
    
    -- Initialize settings if not done
    if not silentAimState.settingsInitialized then
        silentAimState.settingsInitialized = true

        -- Silent Aim specific settings
        table.insert(silentAimState.settingsObjects, Com:CreateSlider("Hit Chance", function(val)
            silentAimState.hitChance = val
        end, 0, 100, "%", true, silentAimState.hitChance))

        table.insert(silentAimState.settingsObjects, Com:CreateDropdown("Target Part", {
            "Head", "Torso", "Random", "Closest"
        }, function(option)
            silentAimState.targetPart = option
        end, true, "Head"))

        table.insert(silentAimState.settingsObjects, Com:CreateSwitch("Visible Check", function(toggle)
            silentAimState.visibleCheck = toggle
        end))
    end

    -- Show/hide silent aim settings
    for _, setting in pairs(silentAimState.settingsObjects) do
        if setting and setting.Frame then
            setting.Frame.Visible = enabled
        end
    end

    print("🎯 Silent Aim is now " .. (enabled and "Enabled" or "Disabled"))
end)

-- Silent Aim hook
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    if not silentAimState.enabled or checkcaller() then
        return oldNamecall(self, ...)
    end

    local method = getnamecallmethod()
    local args = {...}

    if method == "FindPartOnRay" or method == "FindPartOnRayWithIgnoreList" then
        if math.random(1, 100) > silentAimState.hitChance then
            return oldNamecall(self, ...)
        end

        local mousePos = UserInputService:GetMouseLocation()
        local closest = nil
        local closestPos = nil
        local shortestDist = math.huge

        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                if aimbotState.teamCheck and player.Team == LocalPlayer.Team then
                    continue
                end

                local part = nil
                if silentAimState.targetPart == "Random" then
                    local parts = {"Head", "UpperTorso", "HumanoidRootPart"}
                    part = player.Character:FindFirstChild(parts[math.random(1, #parts)])
                else
                    part = player.Character:FindFirstChild(silentAimState.targetPart) or 
                           player.Character:FindFirstChild("HumanoidRootPart")
                end

                if part then
                    if silentAimState.visibleCheck then
                        local ray = Ray.new(Camera.CFrame.Position, (part.Position - Camera.CFrame.Position).Unit * 1000)
                        local hit = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character, Camera})
                        if hit and hit:IsDescendantOf(player.Character) == false then
                            continue
                        end
                    end

                    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                    if onScreen then
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                        if dist < aimbotState.radius and dist < shortestDist then
                            shortestDist = dist
                            closest = player
                            closestPos = part.Position
                        end
                    end
                end
            end
        end

        if closest then
            local origin = args[1].Origin
            local direction = (closestPos - origin).Unit * 1000
            args[1] = Ray.new(origin, direction)
        end
    end

    return oldNamecall(self, unpack(args))
end)

-- Manual aim key
UserInputService.InputBegan:Connect(function(input, gpe)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and not gpe then
        holdingKey = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gpe)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and not gpe then
        holdingKey = false
    end
end)

-- Cleanup function
function cleanUpAllESP()
    if aimbotState.circle then
        aimbotState.circle:Remove()
        aimbotState.circle = nil
    end
end


Bla = gui:CreateCategory("Blatant")

Ren = gui:CreateCategory("Render")

local espState = {
    enabled = false,
    
    -- Tracers
    tracers = {
        drawings = {},
        thickness = 1.5,
        transparency = 0.5,
        color = Color3.new(1, 1, 1)
    },
    
    -- Head Dots
    headDots = {
        drawings = {},
        radius = 4,
        thickness = 1,
        color = Color3.new(1, 1, 1)
    },
    
    -- Skeletons
    skeletons = {
        drawings = {},
        thickness = 2,
        color = Color3.new(1, 1, 1)
    },
    
    -- Settings
    settingsInitialized = false,
    settingsObjects = {}
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

Ren:CreateSwitch("ESP", function(enabled)
    espState.enabled = enabled
    
    -- Initialize systems if not already done
    if not espState.initialized then
        espState.initialized = true
        initTracers()
        initHeadDots()
        initSkeletons()
    end
    
    -- Show/hide setting UIs
    if espState.settingsInitialized then
        for _, setting in pairs(espState.settingsObjects) do
            if setting and setting.Frame then
                setting.Frame.Visible = enabled
            end
        end
    end
    
    -- Initialize settings if not done
    if not espState.settingsInitialized then
        espState.settingsInitialized = true
        
        -- Tracer Settings
        table.insert(espState.settingsObjects, Ren:CreateSwitch("Tracers", function(toggle)
            espState.tracers.enabled = toggle
            if not toggle then
                cleanUpTracers()
            end
        end, false))
        
        table.insert(espState.settingsObjects, Ren:CreateSlider("Tracer Thickness", function(val)
            espState.tracers.thickness = val
            for _, line in pairs(espState.tracers.drawings) do
                if line then line.Thickness = val end
            end
        end, 0.5, 5, nil, true, espState.tracers.thickness))
        
        -- Head Dot Settings
        table.insert(espState.settingsObjects, Ren:CreateSwitch("Head Dots", function(toggle)
            espState.headDots.enabled = toggle
            if not toggle then
                cleanUpHeadDots()
            end
        end, false))
        
        table.insert(espState.settingsObjects, Ren:CreateSlider("Head Dot Radius", function(val)
            espState.headDots.radius = val
            for _, dot in pairs(espState.headDots.drawings) do
                if dot then dot.Radius = val end
            end
        end, 1, 10, nil, true, espState.headDots.radius))
        
        -- Skeleton Settings
        table.insert(espState.settingsObjects, Ren:CreateSwitch("Skeletons", function(toggle)
            espState.skeletons.enabled = toggle
            if not toggle then
                cleanUpSkeletons()
            end
        end, false))
        
        table.insert(espState.settingsObjects, Ren:CreateSlider("Skeleton Thickness", function(val)
            espState.skeletons.thickness = val
            for _, skeleton in pairs(espState.skeletons.drawings) do
                if skeleton then
                    for _, line in pairs(skeleton) do
                        if line then line.Thickness = val end
                    end
                end
            end
        end, 0.5, 5, nil, true, espState.skeletons.thickness))
    end
    
    -- Clean up if disabled
    if not enabled then
        cleanUpAllESP()
    end
    
    print("👁️ ESP is now " .. (enabled and "Enabled" or "Disabled"))
end)

-- Cleanup Functions
function cleanUpAllESP()
    cleanUpTracers()
    cleanUpHeadDots()
    cleanUpSkeletons()
end

function cleanUpTracers()
    for _, line in pairs(espState.tracers.drawings) do
        if line and line.Remove then line:Remove() end
    end
    espState.tracers.drawings = {}
end

function cleanUpHeadDots()
    for _, dot in pairs(espState.headDots.drawings) do
        if dot and dot.Remove then dot:Remove() end
    end
    espState.headDots.drawings = {}
end

function cleanUpSkeletons()
    for _, skeleton in pairs(espState.skeletons.drawings) do
        if skeleton then
            for _, line in pairs(skeleton) do
                if line and line.Remove then line:Remove() end
            end
        end
    end
    espState.skeletons.drawings = {}
end

-- Initialization Functions
function initTracers()
    RunService.RenderStepped:Connect(function()
        if not espState.enabled or not espState.tracers.enabled then return end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player == LocalPlayer then continue end
            local char = player.Character
            if not char or not char:FindFirstChild("HumanoidRootPart") then continue end
            
            local hrp = char.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
            
            -- Create line if needed
            if not espState.tracers.drawings[player] then
                local line = Drawing.new("Line")
                line.Thickness = espState.tracers.thickness
                line.Color = espState.tracers.color
                line.Transparency = espState.tracers.transparency
                line.Visible = false
                espState.tracers.drawings[player] = line
            end
            
            local line = espState.tracers.drawings[player]
            
            if onScreen then
                local from = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                local to = Vector2.new(screenPos.X, screenPos.Y)
                line.From = from
                line.To = to
                line.Visible = true
            else
                line.Visible = false
            end
        end
        
        -- Cleanup disconnected players
        for p, line in pairs(espState.tracers.drawings) do
            if not Players:FindFirstChild(p.Name) then
                line:Remove()
                espState.tracers.drawings[p] = nil
            end
        end
    end)
end

function initHeadDots()
    RunService.RenderStepped:Connect(function()
        if not espState.enabled or not espState.headDots.enabled then return end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player == LocalPlayer then continue end
            local char = player.Character
            if not char or not char:FindFirstChild("Head") then continue end
            
            local head = char.Head
            local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
            
            -- Create dot if needed
            if not espState.headDots.drawings[player] then
                local dot = Drawing.new("Circle")
                dot.Radius = espState.headDots.radius
                dot.Color = espState.headDots.color
                dot.Thickness = espState.headDots.thickness
                dot.Filled = true
                dot.Transparency = 1
                dot.Visible = false
                espState.headDots.drawings[player] = dot
            end
            
            local dot = espState.headDots.drawings[player]
            
            if onScreen then
                dot.Position = Vector2.new(screenPos.X, screenPos.Y)
                dot.Visible = true
            else
                dot.Visible = false
            end
        end
        
        -- Cleanup disconnected players
        for p, dot in pairs(espState.headDots.drawings) do
            if not Players:FindFirstChild(p.Name) then
                dot:Remove()
                espState.headDots.drawings[p] = nil
            end
        end
    end)
end

function initSkeletons()
    RunService.RenderStepped:Connect(function()
        if not espState.enabled or not espState.skeletons.enabled then return end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player == LocalPlayer then continue end
            local char = player.Character
            if not char or not char:FindFirstChild("HumanoidRootPart") then continue end
            
            local humanoidRootPart = char.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
            
            -- Create skeleton lines if needed
            if not espState.skeletons.drawings[player] then
                espState.skeletons.drawings[player] = {}
            end
            
            local skeleton = espState.skeletons.drawings[player]
            local isR6 = not char:FindFirstChild("UpperTorso")
            
            -- Get all body parts
            local bodyParts = {}
            if isR6 then
                bodyParts = {
                    Head = char:FindFirstChild("Head"),
                    Torso = char:FindFirstChild("Torso"),
                    LeftArm = char:FindFirstChild("Left Arm"),
                    RightArm = char:FindFirstChild("Right Arm"),
                    LeftLeg = char:FindFirstChild("Left Leg"),
                    RightLeg = char:FindFirstChild("Right Leg")
                }
            else
                bodyParts = {
                    Head = char:FindFirstChild("Head"),
                    HumanoidRootPart = char:FindFirstChild("HumanoidRootPart"),
                    LeftFoot = char:FindFirstChild("LeftFoot"),
                    LeftHand = char:FindFirstChild("LeftHand"),
                    LeftLowerArm = char:FindFirstChild("LeftLowerArm"),
                    LeftLowerLeg = char:FindFirstChild("LeftLowerLeg"),
                    LeftUpperArm = char:FindFirstChild("LeftUpperArm"),
                    LeftUpperLeg = char:FindFirstChild("LeftUpperLeg"),
                    LowerTorso = char:FindFirstChild("LowerTorso"),
                    RightFoot = char:FindFirstChild("RightFoot"),
                    RightHand = char:FindFirstChild("RightHand"),
                    RightLowerArm = char:FindFirstChild("RightLowerArm"),
                    RightLowerLeg = char:FindFirstChild("RightLowerLeg"),
                    RightUpperArm = char:FindFirstChild("RightUpperArm"),
                    RightUpperLeg = char:FindFirstChild("RightUpperLeg"),
                    UpperTorso = char:FindFirstChild("UpperTorso")
                }
            end
            
            -- Update line positions if the player is on screen
            if onScreen then
                local connections = {}
                
                if isR6 then
                    connections = {
                        {"Head", "Torso"},
                        {"Torso", "LeftArm"},
                        {"Torso", "RightArm"},
                        {"Torso", "LeftLeg"},
                        {"Torso", "RightLeg"}
                    }
                else
                    connections = {
                        {"Head", "UpperTorso"},
                        {"UpperTorso", "LowerTorso"},
                        {"UpperTorso", "LeftUpperArm"},
                        {"UpperTorso", "RightUpperArm"},
                        {"LeftUpperArm", "LeftLowerArm"},
                        {"RightUpperArm", "RightLowerArm"},
                        {"LeftLowerArm", "LeftHand"},
                        {"RightLowerArm", "RightHand"},
                        {"LowerTorso", "LeftUpperLeg"},
                        {"LowerTorso", "RightUpperLeg"},
                        {"LeftUpperLeg", "LeftLowerLeg"},
                        {"RightUpperLeg", "RightLowerLeg"},
                        {"LeftLowerLeg", "LeftFoot"},
                        {"RightLowerLeg", "RightFoot"},
                        {"HumanoidRootPart", "UpperTorso"}
                    }
                end
                
                for _, conn in pairs(connections) do
                    local fromPartName, toPartName = conn[1], conn[2]
                    if bodyParts[fromPartName] and bodyParts[toPartName] then
                        local fromPart = bodyParts[fromPartName]
                        local toPart = bodyParts[toPartName]
                        
                        local screenPosFrom = Camera:WorldToViewportPoint(fromPart.Position)
                        local screenPosTo = Camera:WorldToViewportPoint(toPart.Position)
                        
                        if screenPosFrom and screenPosTo then
                            local connectionId = fromPartName.."_"..toPartName
                            
                            if not skeleton[connectionId] then
                                skeleton[connectionId] = Drawing.new("Line")
                                skeleton[connectionId].Color = espState.skeletons.color
                                skeleton[connectionId].Thickness = espState.skeletons.thickness
                            end
                            
                            skeleton[connectionId].From = Vector2.new(screenPosFrom.X, screenPosFrom.Y)
                            skeleton[connectionId].To = Vector2.new(screenPosTo.X, screenPosTo.Y)
                            skeleton[connectionId].Visible = true
                        end
                    end
                end
            else
                for _, line in pairs(skeleton) do
                    if line then line.Visible = false end
                end
            end
        end
        
        -- Cleanup disconnected players
        for p, skeleton in pairs(espState.skeletons.drawings) do
            if not Players:FindFirstChild(p.Name) then
                for _, line in pairs(skeleton) do
                    if line then line:Remove() end
                end
                espState.skeletons.drawings[p] = nil
            end
        end
    end)
end

local xrayState = {
    enabled = false,
    originalTransparencies = {},
    connection = nil,
    transparency = 0.7, -- Adjust this value (0.5 = 50% transparent)
    wallMaterial = Enum.Material.Plastic -- Change this to target specific materials
}

-- Function to apply X-ray effect to walls
local function applyXrayEffect(enabled)
    if enabled then
        -- Clear previous data
        xrayState.originalTransparencies = {}
        
        -- Scan through workspace for walls/parts
        for _, part in ipairs(workspace:GetDescendants()) do
            if part:IsA("BasePart") then
                -- Skip players and their accessories
                local isPlayerPart = part:FindFirstAncestorOfClass("Model") and 
                                    part:FindFirstAncestorOfClass("Model"):FindFirstChildOfClass("Humanoid")
                
                if not isPlayerPart then
                    -- Store original transparency
                    xrayState.originalTransparencies[part] = {
                        transparency = part.Transparency,
                        localModifier = part.LocalTransparencyModifier
                    }
                    
                    -- Apply X-ray effect
                    part.Transparency = xrayState.transparency
                    part.LocalTransparencyModifier = 0 -- Makes it visible through other walls
                end
            end
        end
    else
        -- Restore original properties
        for part, properties in pairs(xrayState.originalTransparencies) do
            if part and part.Parent then
                part.Transparency = properties.transparency
                part.LocalTransparencyModifier = properties.localModifier
            end
        end
        xrayState.originalTransparencies = {}
    end
end

-- X-Ray Toggle
Ren:CreateSwitch("X-Ray Walls", function(enabled)
    xrayState.enabled = enabled
    applyXrayEffect(enabled)
    
    -- Handle new parts being added
    if enabled and not xrayState.connection then
        xrayState.connection = workspace.DescendantAdded:Connect(function(part)
            if part:IsA("BasePart") then
                local isPlayerPart = part:FindFirstAncestorOfClass("Model") and 
                                    part:FindFirstAncestorOfClass("Model"):FindFirstChildOfClass("Humanoid")
                
                if not isPlayerPart then
                    xrayState.originalTransparencies[part] = {
                        transparency = part.Transparency,
                        localModifier = part.LocalTransparencyModifier
                    }
                    part.Transparency = xrayState.transparency
                    part.LocalTransparencyModifier = 0
                end
            end
        end)
    elseif not enabled and xrayState.connection then
        xrayState.connection:Disconnect()
        xrayState.connection = nil
    end
    
    print("Wall X-Ray is now " .. (enabled and "Enabled" or "Disabled"))
end)

-- Add transparency slider for customization
table.insert(espState.settingsObjects, Ren:CreateSlider("X-Ray Strength", function(value)
    xrayState.transparency = value/100 -- Convert to 0-1 range
    if xrayState.enabled then
        applyXrayEffect(false) -- Reset first
        applyXrayEffect(true) -- Reapply with new value
    end
end, 30, 90, "%", true, 70)) -- 30-90% transparency range, default 70%

-- Add to cleanup function
function cleanUpAllESP()
    -- ... existing cleanup code ...
    
    -- Clean up X-ray
    if xrayState.enabled then
        applyXrayEffect(false)
    end
    if xrayState.connection then
        xrayState.connection:Disconnect()
        xrayState.connection = nil
    end
end

Uti = gui:CreateCategory("Utility")

Wor = gui:CreateCategory("World")

Exe = gui:CreateCategory("Executor")


Exe:CreateButton("Open Executor", function()
    local screenGui = Instance.new("ScreenGui", game.CoreGui)
    screenGui.Name = "ScriptConsole_" .. tostring(math.random(1000, 9999))
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local frame = Instance.new("Frame", screenGui)
    frame.Size = UDim2.new(0, 400, 0, 300)
    frame.Position = UDim2.new(0.5, -200, 0.5, -150)
    frame.BackgroundColor3 = Color3.new(0, 0, 0)
    frame.BorderSizePixel = 0
    frame.Active = true
    frame.Draggable = true

    Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

    local topBar = Instance.new("Frame", frame)
    topBar.Size = UDim2.new(1, 0, 0, 30)
    topBar.Position = UDim2.new(0, 0, 0, 0)
    topBar.BackgroundTransparency = 1

    local function createTopButton(name, text, posOffset)
        local btn = Instance.new("TextButton", topBar)
        btn.Size = UDim2.new(0, 30, 0, 30)
        btn.Position = UDim2.new(1, -30 * posOffset, 0, 0)
        btn.BackgroundColor3 = Color3.new(1, 1, 1)
        btn.TextColor3 = Color3.new(0, 0, 0)
        btn.Font = Enum.Font.SourceSansBold
        btn.TextSize = 18
        btn.Text = text
        btn.Name = name
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
        return btn
    end

    local closeBtn = createTopButton("Close", "X", 1)
    local minimizeBtn = createTopButton("Minimize", "-", 2)
    local maximizeBtn = createTopButton("Maximize", "▢", 3)

    local textBox = Instance.new("TextBox", frame)
    textBox.Size = UDim2.new(1, -20, 1, -90)
    textBox.Position = UDim2.new(0, 10, 0, 40)
    textBox.BackgroundColor3 = Color3.new(0, 0, 0)
    textBox.TextColor3 = Color3.new(1, 1, 1)
    textBox.ClearTextOnFocus = false
    textBox.MultiLine = true
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.TextYAlignment = Enum.TextYAlignment.Top
    textBox.Font = Enum.Font.Code
    textBox.TextSize = 14
    textBox.Text = ""
    textBox.PlaceholderText = 'print("Temic!")'
    Instance.new("UICorner", textBox).CornerRadius = UDim.new(0, 8)

    local executeBtn = Instance.new("TextButton", frame)
    executeBtn.Size = UDim2.new(0.5, -15, 0, 40)
    executeBtn.Position = UDim2.new(0, 10, 1, -45)
    executeBtn.Text = "Execute"
    executeBtn.BackgroundColor3 = Color3.new(1, 1, 1)
    executeBtn.TextColor3 = Color3.new(0, 0, 0)
    executeBtn.Font = Enum.Font.SourceSansBold
    executeBtn.TextSize = 18
    Instance.new("UICorner", executeBtn).CornerRadius = UDim.new(0, 8)

    local clearBtn = Instance.new("TextButton", frame)
    clearBtn.Size = UDim2.new(0.5, -15, 0, 40)
    clearBtn.Position = UDim2.new(0.5, 5, 1, -45)
    clearBtn.Text = "Clear"
    clearBtn.BackgroundColor3 = Color3.new(1, 1, 1)
    clearBtn.TextColor3 = Color3.new(0, 0, 0)
    clearBtn.Font = Enum.Font.SourceSansBold
    clearBtn.TextSize = 18
    Instance.new("UICorner", clearBtn).CornerRadius = UDim.new(0, 8)

    executeBtn.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            local func = loadstring(textBox.Text)
            if func then func() end
        end)
        if not success then
            warn("Script error:", err)
        end
    end)

    clearBtn.MouseButton1Click:Connect(function()
        textBox.Text = ""
    end)

    closeBtn.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    local minimized = false
    local originalSize = frame.Size

    minimizeBtn.MouseButton1Click:Connect(function()
        if not minimized then
            frame.Size = UDim2.new(originalSize.X.Scale, originalSize.X.Offset, 0, 40)
            textBox.Visible = false
            executeBtn.Visible = false
            clearBtn.Visible = false
            minimized = true
        end
    end)

    maximizeBtn.MouseButton1Click:Connect(function()
        if minimized then
            frame.Size = originalSize
            textBox.Visible = true
            executeBtn.Visible = true
            clearBtn.Visible = true
            minimized = false
        end
    end)
end)

-- ✅ Auto re-execute on teleport
local TeleportService = game:GetService("TeleportService")
queueonteleport([[
loadstring(game:HttpGet("https://raw.githubusercontent.com/ClownyCoder/WIP/refs/heads/main/WIP"))()
]])
